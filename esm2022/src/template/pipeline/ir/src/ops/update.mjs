/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { OpKind } from '../enums';
import { TRAIT_CONSUMES_VARS, TRAIT_DEPENDS_ON_SLOT_CONTEXT } from '../traits';
import { NEW_OP } from './shared';
/**
 * Create an `InterpolationTextOp`.
 */
export function createInterpolateTextOp(xref, strings, expressions) {
    return {
        kind: OpKind.InterpolateText,
        target: xref,
        strings,
        expressions,
        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        ...TRAIT_CONSUMES_VARS,
        ...NEW_OP,
    };
}
/**
 * Create a `PropertyOp`.
 */
export function createPropertyOp(xref, bindingKind, name, expression) {
    return {
        kind: OpKind.Property,
        target: xref,
        bindingKind,
        name,
        expression,
        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        ...TRAIT_CONSUMES_VARS,
        ...NEW_OP,
    };
}
/** Create a `StylePropOp`. */
export function createStylePropOp(xref, name, expression, unit) {
    return {
        kind: OpKind.StyleProp,
        target: xref,
        name,
        expression,
        unit,
        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        ...TRAIT_CONSUMES_VARS,
        ...NEW_OP,
    };
}
/** Create a `StyleMapOp`. */
export function createStyleMapOp(xref, expression) {
    return {
        kind: OpKind.StyleMap,
        target: xref,
        expression,
        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        ...TRAIT_CONSUMES_VARS,
        ...NEW_OP,
    };
}
/**
 * Create an `AttributeOp`.
 */
export function createAttributeOp(target, attributeKind, name, value) {
    return {
        kind: OpKind.Attribute,
        target,
        attributeKind,
        name,
        value,
        ...NEW_OP,
    };
}
/**
 * Create a `InterpolateProperty`.
 */
export function createInterpolatePropertyOp(xref, bindingKind, name, strings, expressions) {
    return {
        kind: OpKind.InterpolateProperty,
        target: xref,
        bindingKind,
        name,
        strings,
        expressions,
        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        ...TRAIT_CONSUMES_VARS,
        ...NEW_OP,
    };
}
/**
 * Create a `InterpolateStyleProp`.
 */
export function createInterpolateStylePropOp(xref, name, strings, expressions, unit) {
    return {
        kind: OpKind.InterpolateStyleProp,
        target: xref,
        name,
        strings,
        expressions,
        unit,
        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        ...TRAIT_CONSUMES_VARS,
        ...NEW_OP,
    };
}
/**
 * Create a `InterpolateStyleMap`.
 */
export function createInterpolateStyleMapOp(xref, strings, expressions) {
    return {
        kind: OpKind.InterpolateStyleMap,
        target: xref,
        strings,
        expressions,
        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        ...TRAIT_CONSUMES_VARS,
        ...NEW_OP,
    };
}
/**
 * Create an `AdvanceOp`.
 */
export function createAdvanceOp(delta) {
    return {
        kind: OpKind.Advance,
        delta,
        ...NEW_OP,
    };
}
//# sourceMappingURL=data:application/json;base64,