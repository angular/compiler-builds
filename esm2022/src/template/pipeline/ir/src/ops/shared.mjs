/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { OpKind } from '../enums';
/**
 * Create a `StatementOp`.
 */
export function createStatementOp(statement) {
    return {
        kind: OpKind.Statement,
        statement,
        ...NEW_OP,
    };
}
/**
 * Create a `VariableOp`.
 */
export function createVariableOp(xref, variable, initializer, isConstant) {
    return {
        kind: OpKind.Variable,
        xref,
        variable,
        initializer,
        isConstant,
        ...NEW_OP,
    };
}
/**
 * Static structure shared by all operations.
 *
 * Used as a convenience via the spread operator (`...NEW_OP`) when creating new operations, and
 * ensures the fields are always in the same order.
 */
export const NEW_OP = {
    debugListId: null,
    prev: null,
    next: null,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXIvc3JjL3RlbXBsYXRlL3BpcGVsaW5lL2lyL3NyYy9vcHMvc2hhcmVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUdILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUE0QmhDOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFzQixTQUFzQjtJQUMzRSxPQUFPO1FBQ0wsSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQ3RCLFNBQVM7UUFDVCxHQUFHLE1BQU07S0FDVixDQUFDO0FBQ0osQ0FBQztBQStCRDs7R0FFRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FDNUIsSUFBWSxFQUFFLFFBQTBCLEVBQUUsV0FBeUIsRUFDbkUsVUFBbUI7SUFDckIsT0FBTztRQUNMLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUTtRQUNyQixJQUFJO1FBQ0osUUFBUTtRQUNSLFdBQVc7UUFDWCxVQUFVO1FBQ1YsR0FBRyxNQUFNO0tBQ1YsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBK0M7SUFDaEUsV0FBVyxFQUFFLElBQUk7SUFDakIsSUFBSSxFQUFFLElBQUk7SUFDVixJQUFJLEVBQUUsSUFBSTtDQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgbyBmcm9tICcuLi8uLi8uLi8uLi8uLi9vdXRwdXQvb3V0cHV0X2FzdCc7XG5pbXBvcnQge09wS2luZH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHtPcCwgWHJlZklkfSBmcm9tICcuLi9vcGVyYXRpb25zJztcbmltcG9ydCB7U2VtYW50aWNWYXJpYWJsZX0gZnJvbSAnLi4vdmFyaWFibGUnO1xuXG4vKipcbiAqIEEgc3BlY2lhbCBgT3BgIHdoaWNoIGlzIHVzZWQgaW50ZXJuYWxseSBpbiB0aGUgYE9wTGlzdGAgbGlua2VkIGxpc3QgdG8gcmVwcmVzZW50IHRoZSBoZWFkIGFuZFxuICogdGFpbCBub2RlcyBvZiB0aGUgbGlzdC5cbiAqXG4gKiBgTGlzdEVuZE9wYCBpcyBjcmVhdGVkIGludGVybmFsbHkgaW4gdGhlIGBPcExpc3RgIGFuZCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaXN0RW5kT3A8T3BUIGV4dGVuZHMgT3A8T3BUPj4gZXh0ZW5kcyBPcDxPcFQ+IHtcbiAga2luZDogT3BLaW5kLkxpc3RFbmQ7XG59XG5cbi8qKlxuICogQW4gYE9wYCB3aGljaCBkaXJlY3RseSB3cmFwcyBhbiBvdXRwdXQgYFN0YXRlbWVudGAuXG4gKlxuICogT2Z0ZW4gYFN0YXRlbWVudE9wYHMgYXJlIHRoZSBmaW5hbCByZXN1bHQgb2YgSVIgcHJvY2Vzc2luZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0ZW1lbnRPcDxPcFQgZXh0ZW5kcyBPcDxPcFQ+PiBleHRlbmRzIE9wPE9wVD4ge1xuICBraW5kOiBPcEtpbmQuU3RhdGVtZW50O1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IHN0YXRlbWVudC5cbiAgICovXG4gIHN0YXRlbWVudDogby5TdGF0ZW1lbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgYFN0YXRlbWVudE9wYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRlbWVudE9wPE9wVCBleHRlbmRzIE9wPE9wVD4+KHN0YXRlbWVudDogby5TdGF0ZW1lbnQpOiBTdGF0ZW1lbnRPcDxPcFQ+IHtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBPcEtpbmQuU3RhdGVtZW50LFxuICAgIHN0YXRlbWVudCxcbiAgICAuLi5ORVdfT1AsXG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9uIHdoaWNoIGRlY2xhcmVzIGFuZCBpbml0aWFsaXplcyBhIGBTZW1hbnRpY1ZhcmlhYmxlYCwgdGhhdCBpcyB2YWxpZCBlaXRoZXIgaW4gY3JlYXRlIG9yXG4gKiB1cGRhdGUgSVIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmFyaWFibGVPcDxPcFQgZXh0ZW5kcyBPcDxPcFQ+PiBleHRlbmRzIE9wPE9wVD4ge1xuICBraW5kOiBPcEtpbmQuVmFyaWFibGU7XG5cbiAgLyoqXG4gICAqIGBYcmVmSWRgIHdoaWNoIGlkZW50aWZpZXMgdGhpcyBzcGVjaWZpYyB2YXJpYWJsZSwgYW5kIGlzIHVzZWQgdG8gcmVmZXJlbmNlIHRoaXMgdmFyaWFibGUgZnJvbVxuICAgKiBvdGhlciBwYXJ0cyBvZiB0aGUgSVIuXG4gICAqL1xuICB4cmVmOiBYcmVmSWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBgU2VtYW50aWNWYXJpYWJsZWAgd2hpY2ggZGVzY3JpYmVzIHRoZSBtZWFuaW5nIGJlaGluZCB0aGlzIHZhcmlhYmxlLlxuICAgKi9cbiAgdmFyaWFibGU6IFNlbWFudGljVmFyaWFibGU7XG5cbiAgLyoqXG4gICAqIEV4cHJlc3Npb24gcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGUgdmFyaWFibGUuXG4gICAqL1xuICBpbml0aWFsaXplcjogby5FeHByZXNzaW9uO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSB2YXJpYWJsZSBjcmVhdGVkIGlzIGEgY29uc3RhbnQuXG4gICAqL1xuICBpc0NvbnN0YW50OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGBWYXJpYWJsZU9wYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZhcmlhYmxlT3A8T3BUIGV4dGVuZHMgT3A8T3BUPj4oXG4gICAgeHJlZjogWHJlZklkLCB2YXJpYWJsZTogU2VtYW50aWNWYXJpYWJsZSwgaW5pdGlhbGl6ZXI6IG8uRXhwcmVzc2lvbixcbiAgICBpc0NvbnN0YW50OiBib29sZWFuKTogVmFyaWFibGVPcDxPcFQ+IHtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBPcEtpbmQuVmFyaWFibGUsXG4gICAgeHJlZixcbiAgICB2YXJpYWJsZSxcbiAgICBpbml0aWFsaXplcixcbiAgICBpc0NvbnN0YW50LFxuICAgIC4uLk5FV19PUCxcbiAgfTtcbn1cblxuLyoqXG4gKiBTdGF0aWMgc3RydWN0dXJlIHNoYXJlZCBieSBhbGwgb3BlcmF0aW9ucy5cbiAqXG4gKiBVc2VkIGFzIGEgY29udmVuaWVuY2UgdmlhIHRoZSBzcHJlYWQgb3BlcmF0b3IgKGAuLi5ORVdfT1BgKSB3aGVuIGNyZWF0aW5nIG5ldyBvcGVyYXRpb25zLCBhbmRcbiAqIGVuc3VyZXMgdGhlIGZpZWxkcyBhcmUgYWx3YXlzIGluIHRoZSBzYW1lIG9yZGVyLlxuICovXG5leHBvcnQgY29uc3QgTkVXX09QOiBQaWNrPE9wPGFueT4sICdkZWJ1Z0xpc3RJZCd8J3ByZXYnfCduZXh0Jz4gPSB7XG4gIGRlYnVnTGlzdElkOiBudWxsLFxuICBwcmV2OiBudWxsLFxuICBuZXh0OiBudWxsLFxufTtcbiJdfQ==