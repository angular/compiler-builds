/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as o from '../../../../output/output_ast';
import * as ir from '../../ir';
export function phaseRepeaterDerivedVars(job) {
    const repeaters = new Map();
    for (const unit of job.units) {
        for (const op of unit.ops()) {
            if (op.kind === ir.OpKind.RepeaterCreate) {
                repeaters.set(op.xref, op);
            }
        }
    }
    for (const unit of job.units) {
        for (const op of unit.ops()) {
            ir.transformExpressionsInOp(op, expr => {
                if (!(expr instanceof ir.DerivedRepeaterVarExpr)) {
                    return expr;
                }
                const repeaterOp = repeaters.get(expr.xref);
                switch (expr.identity) {
                    case ir.DerivedRepeaterVarIdentity.First:
                        return new o.BinaryOperatorExpr(o.BinaryOperator.Identical, new ir.LexicalReadExpr(repeaterOp.varNames.$index), o.literal(0));
                    case ir.DerivedRepeaterVarIdentity.Last:
                        return new o.BinaryOperatorExpr(o.BinaryOperator.Identical, new ir.LexicalReadExpr(repeaterOp.varNames.$index), new o.BinaryOperatorExpr(o.BinaryOperator.Minus, new ir.LexicalReadExpr(repeaterOp.varNames.$count), o.literal(1)));
                    case ir.DerivedRepeaterVarIdentity.Even:
                        return new o.BinaryOperatorExpr(o.BinaryOperator.Identical, new o.BinaryOperatorExpr(o.BinaryOperator.Modulo, new ir.LexicalReadExpr(repeaterOp.varNames.$index), o.literal(2)), o.literal(0));
                    case ir.DerivedRepeaterVarIdentity.Odd:
                        return new o.BinaryOperatorExpr(o.BinaryOperator.NotIdentical, new o.BinaryOperatorExpr(o.BinaryOperator.Modulo, new ir.LexicalReadExpr(repeaterOp.varNames.$index), o.literal(2)), o.literal(0));
                }
            }, ir.VisitorContextFlag.None);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0ZXJfZGVyaXZlZF92YXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29tcGlsZXIvc3JjL3RlbXBsYXRlL3BpcGVsaW5lL3NyYy9waGFzZXMvcmVwZWF0ZXJfZGVyaXZlZF92YXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sS0FBSyxDQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDbkQsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFJL0IsTUFBTSxVQUFVLHdCQUF3QixDQUFDLEdBQW1CO0lBQzFELE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFrQyxDQUFDO0lBRTVELEtBQUssTUFBTSxJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtRQUM1QixLQUFLLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUMzQixJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Z0JBQ3hDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQzthQUM1QjtTQUNGO0tBQ0Y7SUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUU7UUFDNUIsS0FBSyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDM0IsRUFBRSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDckMsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFO29CQUNoRCxPQUFPLElBQUksQ0FBQztpQkFDYjtnQkFDRCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztnQkFFN0MsUUFBUSxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNyQixLQUFLLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLO3dCQUN0QyxPQUFPLElBQUksQ0FBQyxDQUFDLGtCQUFrQixDQUMzQixDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFDOUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwQixLQUFLLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJO3dCQUNyQyxPQUFPLElBQUksQ0FBQyxDQUFDLGtCQUFrQixDQUMzQixDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFDOUUsSUFBSSxDQUFDLENBQUMsa0JBQWtCLENBQ3BCLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUMxRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekIsS0FBSyxFQUFFLENBQUMsMEJBQTBCLENBQUMsSUFBSTt3QkFDckMsT0FBTyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FDM0IsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQzFCLElBQUksQ0FBQyxDQUFDLGtCQUFrQixDQUNwQixDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFDM0UsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BCLEtBQUssRUFBRSxDQUFDLDBCQUEwQixDQUFDLEdBQUc7d0JBQ3BDLE9BQU8sSUFBSSxDQUFDLENBQUMsa0JBQWtCLENBQzNCLENBQUMsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUM3QixJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FDcEIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQzNFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDakIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNyQjtZQUNILENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgbyBmcm9tICcuLi8uLi8uLi8uLi9vdXRwdXQvb3V0cHV0X2FzdCc7XG5pbXBvcnQgKiBhcyBpciBmcm9tICcuLi8uLi9pcic7XG5cbmltcG9ydCB0eXBlIHtDb21waWxhdGlvbkpvYn0gZnJvbSAnLi4vY29tcGlsYXRpb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gcGhhc2VSZXBlYXRlckRlcml2ZWRWYXJzKGpvYjogQ29tcGlsYXRpb25Kb2IpOiB2b2lkIHtcbiAgY29uc3QgcmVwZWF0ZXJzID0gbmV3IE1hcDxpci5YcmVmSWQsIGlyLlJlcGVhdGVyQ3JlYXRlT3A+KCk7XG5cbiAgZm9yIChjb25zdCB1bml0IG9mIGpvYi51bml0cykge1xuICAgIGZvciAoY29uc3Qgb3Agb2YgdW5pdC5vcHMoKSkge1xuICAgICAgaWYgKG9wLmtpbmQgPT09IGlyLk9wS2luZC5SZXBlYXRlckNyZWF0ZSkge1xuICAgICAgICByZXBlYXRlcnMuc2V0KG9wLnhyZWYsIG9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IHVuaXQgb2Ygam9iLnVuaXRzKSB7XG4gICAgZm9yIChjb25zdCBvcCBvZiB1bml0Lm9wcygpKSB7XG4gICAgICBpci50cmFuc2Zvcm1FeHByZXNzaW9uc0luT3Aob3AsIGV4cHIgPT4ge1xuICAgICAgICBpZiAoIShleHByIGluc3RhbmNlb2YgaXIuRGVyaXZlZFJlcGVhdGVyVmFyRXhwcikpIHtcbiAgICAgICAgICByZXR1cm4gZXhwcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXBlYXRlck9wID0gcmVwZWF0ZXJzLmdldChleHByLnhyZWYpITtcblxuICAgICAgICBzd2l0Y2ggKGV4cHIuaWRlbnRpdHkpIHtcbiAgICAgICAgICBjYXNlIGlyLkRlcml2ZWRSZXBlYXRlclZhcklkZW50aXR5LkZpcnN0OlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBvLkJpbmFyeU9wZXJhdG9yRXhwcihcbiAgICAgICAgICAgICAgICBvLkJpbmFyeU9wZXJhdG9yLklkZW50aWNhbCwgbmV3IGlyLkxleGljYWxSZWFkRXhwcihyZXBlYXRlck9wLnZhck5hbWVzLiRpbmRleCksXG4gICAgICAgICAgICAgICAgby5saXRlcmFsKDApKTtcbiAgICAgICAgICBjYXNlIGlyLkRlcml2ZWRSZXBlYXRlclZhcklkZW50aXR5Lkxhc3Q6XG4gICAgICAgICAgICByZXR1cm4gbmV3IG8uQmluYXJ5T3BlcmF0b3JFeHByKFxuICAgICAgICAgICAgICAgIG8uQmluYXJ5T3BlcmF0b3IuSWRlbnRpY2FsLCBuZXcgaXIuTGV4aWNhbFJlYWRFeHByKHJlcGVhdGVyT3AudmFyTmFtZXMuJGluZGV4KSxcbiAgICAgICAgICAgICAgICBuZXcgby5CaW5hcnlPcGVyYXRvckV4cHIoXG4gICAgICAgICAgICAgICAgICAgIG8uQmluYXJ5T3BlcmF0b3IuTWludXMsIG5ldyBpci5MZXhpY2FsUmVhZEV4cHIocmVwZWF0ZXJPcC52YXJOYW1lcy4kY291bnQpLFxuICAgICAgICAgICAgICAgICAgICBvLmxpdGVyYWwoMSkpKTtcbiAgICAgICAgICBjYXNlIGlyLkRlcml2ZWRSZXBlYXRlclZhcklkZW50aXR5LkV2ZW46XG4gICAgICAgICAgICByZXR1cm4gbmV3IG8uQmluYXJ5T3BlcmF0b3JFeHByKFxuICAgICAgICAgICAgICAgIG8uQmluYXJ5T3BlcmF0b3IuSWRlbnRpY2FsLFxuICAgICAgICAgICAgICAgIG5ldyBvLkJpbmFyeU9wZXJhdG9yRXhwcihcbiAgICAgICAgICAgICAgICAgICAgby5CaW5hcnlPcGVyYXRvci5Nb2R1bG8sIG5ldyBpci5MZXhpY2FsUmVhZEV4cHIocmVwZWF0ZXJPcC52YXJOYW1lcy4kaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICBvLmxpdGVyYWwoMikpLFxuICAgICAgICAgICAgICAgIG8ubGl0ZXJhbCgwKSk7XG4gICAgICAgICAgY2FzZSBpci5EZXJpdmVkUmVwZWF0ZXJWYXJJZGVudGl0eS5PZGQ6XG4gICAgICAgICAgICByZXR1cm4gbmV3IG8uQmluYXJ5T3BlcmF0b3JFeHByKFxuICAgICAgICAgICAgICAgIG8uQmluYXJ5T3BlcmF0b3IuTm90SWRlbnRpY2FsLFxuICAgICAgICAgICAgICAgIG5ldyBvLkJpbmFyeU9wZXJhdG9yRXhwcihcbiAgICAgICAgICAgICAgICAgICAgby5CaW5hcnlPcGVyYXRvci5Nb2R1bG8sIG5ldyBpci5MZXhpY2FsUmVhZEV4cHIocmVwZWF0ZXJPcC52YXJOYW1lcy4kaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICBvLmxpdGVyYWwoMikpLFxuICAgICAgICAgICAgICAgIG8ubGl0ZXJhbCgwKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGlyLlZpc2l0b3JDb250ZXh0RmxhZy5Ob25lKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==